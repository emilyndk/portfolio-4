---
// Import components and styles
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import '../styles/tailwind.css';
import 'animate.css';

const { title } = Astro.props;
---

<html lang="da">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{Astro.props.title}</title>
    <link rel="stylesheet" href="https://use.typekit.net/prt2ztm.css">
  </head>
  <body class="bg-isabelline">
    <!-- Header -->
    <header class="">
      <Header />
    </header>

    <!-- Main Content -->
    <main>
      <slot />
    </main>

    <!-- Footer -->
    <footer>
      <Footer />
    </footer>
  </body>
</html>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('a[data-link]'); // Select all links
    const sections = document.querySelectorAll('section'); // Select all sections

    // Create an IntersectionObserver to track visibility of each section
    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        // Get the corresponding link for the section being observed
        const link = document.querySelector(`a[data-link="#${entry.target.id}"]`);

        if (link) { // Check if the link exists
          if (entry.isIntersecting) {
            // Add 'aria-current' when section is in view
            link.setAttribute('aria-current', 'page');
          } else {
            // Remove 'aria-current' when section is out of view
            link.removeAttribute('aria-current');
          }
        }
      });
    }, {
      threshold: 0.5, // This means 50% of the section must be in view
    });

    // Observe each section
    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>


